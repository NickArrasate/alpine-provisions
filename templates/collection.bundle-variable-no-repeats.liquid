{% comment %}
This module will build a bundle of three items, displayed in a row. the submit button will make an ajax call to add the three items to the cart.

This module is dependant on the cart.js package being installed on the theme -
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/shopify-cartjs/0.4.1/cart.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/shopify-cartjs/0.4.1/rivets-cart.min.js"></script>

 and instantiated using this script:
 <script type="text/javascript">
    jQuery(function() {
        CartJS.init({{ cart | json }});
    });
</script>
{% endcomment %}
{% assign variable_size = collection.description | split: '<!--variable-->' %}
{% assign sizefull = variable_size[1] | strip_html | strip %}
{% assign size = variable_size[1]  | remove: 'variable-' | strip_html | strip %}
{% assign discount_grab = collection.description | split: '<!--discount-->' %}
{% assign discount_code = discount_grab[1] | strip_html | strip %}
{% capture logic_script %}
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/async@2.6.1/dist/async.min.js"></script>
<script type="text/javascript">
$(document).on("cart.requestStarted", function(event, cart) {
    console.log("started");
    });
    $(document).on("cart.ready", function(event, cart) {
    console.log("Cart Ready");
    });
$(document).on("cart.requestComplete", function(event, cart) {
    });
</script>
<script>
    var id_array = [];
    var js_size = {{ size }};
    var id_array_storage = [];
    var product_text_storage = [];
    var discount_code = "{{ discount_code }}";
    for (i = 0; i < js_size; i++){
        id_array_storage[i] = null ;
    }
    for (i = 0; i < js_size; i++){
        product_text_storage[i] = $("#selected_product_" + (i+1) ) ;
    }

    function checkFull(){
        var new_switch = '';
        var counter = 1;
        for (i = 0; i < product_text_storage.length; i++){
            if (id_array_storage[i] == null  ){
                new_switch = "empty";
            } else if (id_array_storage[i] != null && new_switch != 'empty' && counter < product_text_storage.length ) {
                counter ++;
            } else{
                $('#bundle-adder-btn').fadeIn(200);
                continue
            }
        }
    }
    function addProduct(id, title){
        var title = title;
        for (i = 0; i < product_text_storage.length; i++){
            if ($(product_text_storage[i].selector).text() == "" ){
                $(product_text_storage[i].selector).text(title);
                id_array_storage[i] = id;
                console.log(id, title);
                checkFull();
                break
            } else {
                continue
            }
        }
       $("html, body").animate({ scrollTop: $("#bundle_anchor").offset().top -380}, 800);
    };
    function removeProduct(loc){
            var loc = parseInt(loc);
            $(product_text_storage[loc].selector).text("");
            id_array_storage[loc] = null;
            $('#bundle-adder-btn').fadeOut(200);
    };
    function checkDuplicates(a){
        var counts = [];
        for(var i = 0; i <= a.length; i++) {
            if(counts[a[i]] === undefined) {
                counts[a[i]] = 1;
            } else {
                return false;
            }
        }
        return true;
    }
    function run(){
        if(checkDuplicates(id_array_storage)){
            bundle();
        } else {
            alert('Please select unique items');
        };
    }
    function bundle() {
        id_array = [];
        for (i = 0; i < product_text_storage.length; i++){
            id_array.push(id_array_storage[i]);
        }
        console.log(id_array);
        if(id_array.length == product_text_storage.length ){
            async.each(id_array, function(id, next){
                CartJS.addItem(id, 1, {"Part of a Bundle": ""},{
                    "complete": function() {
                        console.log("complete!");
                    },
                    "success": function(data, textStatus, jqXHR){
                        next();
                    },
                    "error": function(jqhXHR, textStatus, errorThrown){
                        next(errorThrown);
                    },
                    async: true
                })
            },
            function(error){
                if (!error){
                    if (discount_code != null && discount_code != ''){
                        window.location = "/discount/" + discount_code + "?redirect=/cart";
                    } else {
                        window.location = "/cart";
                    }
                }
            })
        } else {
            alert("Please add more items to your bundle");
        }

    };

</script>

{% endcapture %}

{{ logic_script }}
{% layout "theme" %}
{% section "pre-header" %}
{% section "header-collection-bundles" %}
<div class="contained text-center" style="margin-top:2em;">
<p>{{collection.description | remove: discount_code | remove: sizefull }}</p>
{% if size %}<h5>Select any {{ size }} items to qualify. {% if discount_code %}Discount is automatically applied at checkout.{% endif %}</h5>{% endif %}

</div>

<div class="contained row">
{% comment %} {% section "bundle-intro" %} {% endcomment %}
<div class="col-12 text-center bundle-complete-btn" style="margin: 0 0 2em; height: 39px;">
<button  id="bundle-adder-btn" style="display:none;" class="btn btn-large" type="button" onClick="run()">Add Bundle to Cart</button>
</div>
<div id="bundle_anchor" class="contained row col-12" style="margin: 1em 0 3em; padding: 0 5%;">
    {% for i in (1..size) %}
    <div class="col-sm-4 d-flex flex-column align-items-center justify-content-between">
    <strong id="selected_product_{{i}}" style="margin-top: 1em;"></strong>
    <p>Product {{i}}</p>
    <button class="btn btn-small btn-about alt" type="button" id="remove_{{i}}" onClick="removeProduct('{{i | minus: 1 }}')">Remove</button>
    </div>
    {% endfor %}
</div>

{% include 'product-list-row-for-bundles' %}
</div>
